#i m a 11th std guy who has created this 
#simple snake and apple game

#importing some modules 
import pygame
from pygame.locals import *
import time
import random

#size of the block and the apple and the background color 
SIZE = 40
BACKGROUND_COLOR = (22, 181, 35)

#i have maded the program with the help of OOPS (objected oriented programming)
#i have maded classes, objects,constructor(self)
#with the help of OOPS the program is more readabe and clean
#with the help of (self) this program length is small


#this how i created the apple and inserted into the window
class Apple:
    def __init__(self, parent_screen):
        self.parent_screen = parent_screen
        self.image = pygame.image.load(r"C:\Users\pc\Pictures\snake\Screenshot 2022-11-25 194111.png").convert()
        self.x = 120
        self.y = 120

    #drawing the screen 
    def draw(self):
        self.parent_screen.blit(self.image, (self.x, self.y))
        pygame.display.flip()
    
    #from the use of random the apple will travel at random coordinates
    def move(self):
        self.x = random.randint(1,19)*SIZE
        self.y = random.randint(1,14)*SIZE

#class for snake i made an snake from the help of squares
class Snake:
    def __init__(self, parent_screen):
        self.parent_screen = parent_screen
        self.image = pygame.image.load(r"C:\Users\pc\Pictures\snake\block.jpg.png").convert()
        self.direction = 'down'
        
        #pixels of the square
        self.length = 1
        self.x = [40]
        self.y = [40]
    
    #this is the main fuctions to move the snake up down right and left from the buttons
    def move_left(self):
        self.direction = 'left'

    def move_right(self):
        self.direction = 'right'

    def move_up(self):
        self.direction = 'up'

    def move_down(self):
        self.direction = 'down'

    def walk(self):
        
        for i in range(self.length-1,0,-1):
            self.x[i] = self.x[i-1]
            self.y[i] = self.y[i-1]

       #in this block of code the snake can move in the x and y plane
        if self.direction == 'left':
            self.x[0] -= SIZE
        if self.direction == 'right':
            self.x[0] += SIZE
        if self.direction == 'up':
            self.y[0] -= SIZE
        if self.direction == 'down':
            self.y[0] += SIZE

        self.draw()
    
    #for the bg colour this block of code is responsible
    def draw(self):
        self.parent_screen.fill(BACKGROUND_COLOR)

        #blit helps to draw th square
        #pygame.display.flip() is the main thing after every changes done in the pygame window
        for i in range(self.length):
            self.parent_screen.blit(self.image, (self.x[i], self.y[i]))
        pygame.display.flip()
    
    #this block of code is responsibe when the snake will eat apple after snake's size increase
    def increase_length(self):
        self.length += 1
        self.x.append(-1)
        self.y.append(-1)

#this is the main class of the program pygame is iniated in it 
#diplay of the output screen is there and the pixels is also mentioned there 
#after this block of code, apple and snake will be created
class Game:
    def __init__(self):
        pygame.init()
        #pygame.mixer.init()
        pygame.display.set_caption("Snake And Apple Game")
        self.surface = pygame.display.set_mode((800, 600))
        self.snake = Snake(self.surface)
        self.snake.draw()
        self.apple = Apple(self.surface)
        self.apple.draw()

    # if you want to add bgm you can add
    #def play_background_music(self):
        #pygame.mixer.music.load(r'C:\Users\pc\Documents\sounds\bgm')
        #pygame.mixer.music.play(-1, 0)

    #this block of code will work after your snake will hit 
    #it resets the values like score 
    def reset(self):
        self.snake = Snake(self.surface)
        self.apple = Apple(self.surface)

    def is_collision(self, x1, y1, x2, y2):
        if x1 >= x2 and x1 < x2 + SIZE:
            if y1 >= y2 and y1 < y2 + SIZE:
                return True
        return False

    #snake will walk and the apple will shown in random places and scores will be displayed in the corner
    def play(self):
        self.snake.walk()
        self.apple.draw()
        self.display_score()
        pygame.display.flip()

        # snake eating apple scenario
        if self.is_collision(self.snake.x[0], self.snake.y[0], self.apple.x, self.apple.y):
            #sound = pygame.mixer.Sound(r"C:\Users\pc\Documents\sounds\ding.mp3")
            #pygame.mixer.Sound.play(sound)
            self.snake.increase_length()
            self.apple.move()

        # snake colliding with itself
        for i in range(2, self.snake.length):
            if self.is_collision(self.snake.x[0], self.snake.y[0], self.snake.x[i], self.snake.y[i]):
                #sound = pygame.mixer.Sound(r"C:\Users\pc\Documents\sounds\crash")
                #pygame.mixer.Sound.play(sound)

                raise "Collision Occured"

        # snake colliding with the boundries of the window
        if not (0 <= self.snake.x[0] <= 800 and 0 <= self.snake.y[0] <= 600):
            self.play_sound('crash')
            raise "Hit the boundry error"

    #this is will display the score of the player
    def display_score(self):
        font = pygame.font.SysFont('arial',30)
        score = font.render(f"Score: {self.snake.length}",True,(200,200,200))
        self.surface.blit(score,(650,20))
    
    #this block of code will ask you that do you want to play anther time or not
    def show_game_over(self):
        self.surface.fill(BACKGROUND_COLOR)
        font = pygame.font.SysFont('arial', 40)
        line1 = font.render(f"Game is over! Your score is {self.snake.length}", True, (255, 255, 255))
        self.surface.blit(line1, (150, 200))
        line2 = font.render("To play again press Enter. To exit press Escape!", True, (255, 255, 255))
        self.surface.blit(line2, (100, 250))
        
        #this is the main thing after changes has been done in the output screen 
        pygame.display.flip()

#main fuction that will take your inputs and display the output
    def run(self):
        running = True
        pause = False

        while running:
            for event in pygame.event.get():
                if event.type == KEYDOWN:
                    if event.key == K_ESCAPE:
                        running = False

                    if event.key == K_RETURN:
                        pause = False

                    if not pause:
                        if event.key == K_LEFT:
                            self.snake.move_left()

                        if event.key == K_RIGHT:
                            self.snake.move_right()

                        if event.key == K_UP:
                            self.snake.move_up()

                        if event.key == K_DOWN:
                            self.snake.move_down()

                elif event.type == QUIT:
                    running = False
           
           #this try function will check the error in the program if there is error then it will stop the program there it self
            try:
            

                if not pause:
                    self.play()
            
            #if the try block will not run then this block will run 
            except Exception as e:
                self.show_game_over()
                pause = True
                self.reset()
            #speed of the snake by using time.sleep()
            time.sleep(.21)

#this is to ensure that our program fuctions is imported but code is not executed
if __name__ == '__main__':
    game = Game()
    game.run()

